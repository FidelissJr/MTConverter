; This example program checks if the input string is a binary palindrome.
; Input: a string of 0's and 1's, eg '1001001'


; Machine starts in state 0.

; State 0: read the leftmost symbol
aux0 0 _ r 1o
aux0 1 _ r 1i
aux0 _ _ * accept     ; Empty input

; State 1o, 1i: find the rightmost symbol
1o _ _ l 2o
1o * * r 1o

1i _ _ l 2i
1i * * r 1i

; State 2o, 2i: check if the rightmost symbol matches the most recently read left-hand symbol
2o 0 _ l 3
2o _ _ * accept
2o * * * reject

2i 1 _ l 3
2i _ _ * accept
2i * * * reject

; State 3, 4: return to left end of remaining input
3 _ _ * accept
3 * * l 4
4 * * l 4
4 _ _ r aux0  ; Back to the beginning

accept * : r accept2
accept2 * ) * halt-accept

reject _ : r reject2
reject * _ l reject
reject2 * ( * halt-reject

; Novas configurações geradas
0 0 0 l 0
0 1 1 l 0
0 * # r aux0


2o # # r acharFinalFita
2i # # r 2i
3 # # r 3
4 # # r 4


; Estado para encontrar o final dos dados
acharFinalFita * * r acharFinalFita
acharFinalFita @ * r shift_init

; Deslocar o marcador @ para a direita
shift_init * * r shift_init  ; Pula sobre os símbolos até o espaço em branco
shift_init _ @ l prepare_shift  ; Move @ para a direita e inicia o deslocamento de símbolos

; Preparar para deslocar símbolos
prepare_shift * * l prepare_shift
prepare_shift @ _ l shift_right

; Deslocar símbolos para a direita
shift_right 0 _ r write_0  ; Lê 0, move para a direita para escrever 0
shift_right 1 _ r write_1  ; Lê 1, move para a direita para escrever 1
shift_right _ * l shift_right
shift_right # * r final_clean

write_0 * 0 l shift_right  ; Escreve 0 e retorna para ler o próximo símbolo
write_1 * 1 l shift_right  ; Escreve 1 e retorna para ler o próximo símbolo

final_clean _ * * VOLTA_estado_que_chamou(2)
